---
title: "Evaluación - Shiny - Diplomado 2024"
author: "Joshua Kunst Fuentes"
lang: es
format: 
  html:
    self-contained: true
---

1. Describe brevemente la arquitectura básica de una aplicación Shiny. ¿Cuáles son sus dos componentes principales?


*Respuesta:*

Los componentes principales de una aplicación Shiny son:

- *ui (User Interface)*: Define la interfaz de usuario, es decir, cómo se verá la aplicación, qué inputs o elementos tendrá y en que lugar.
- *server*: Define la lógica de la aplicación, es decir, cómo se procesarán los datos y cómo reaccionará la aplicación a las entradas de usuario.


2. Considera la siguiente aplicación:

```r
library(shiny)

ui <- fluidPage(
  titlePanel("Aplicación Shiny Simple"),
  
  sidebarLayout(
    sidebarPanel(
      textInput("nombre", "Ingresa tu nombre:", value = ""),
      numericInput("edad", "Ingresa tu edad:", value = NULL)
    ),
    
    mainPanel(
      h3("Mensaje:"),
      textOutput("saludo")
    )
  )
)

server <- function(input, output) {
  
  output$saludo <- renderText({
    paste("¡Hola,", input$nombre, "!")
  })
}

shinyApp(ui = ui, server = server)
```

A continuación explique el rol o función de:

- El elemento `input`.
- El argumento `value` en la función `textInput`.
- `textOutput`.
- `"saludo"`.

*Respuesta*

- El elemento `input` contiene los valores de las entradas que el usuario selecciona o ingresa en la interfaz.
- El argumento `value` define el valor por defecto que tendrá el cuadro de texto la interfaz al iniciar la aplicación.
- `textOutput` es una función que se utiliza para reservar espacio en la interfaz donde se mostrará un texto, o de forma alternativa sirve para definir el lugar del output de tipo texto en nuestra aplicación.
- `"saludo"` es el id, o identificador único que usará para referencia esta salida en el servidor, o la lógica en el _server_.

3. En la aplicación anterior, genere el código necesario para que la aplicación junto al saludar indique el año de nacimiento del usuario. Basta con indicar el código dentro de `renderText`.

*Respuesta*

Una posible solución puede ser:

```r
...
server <- function(input, output) {
  
  output$saludo <- renderText({
    paste("¡Hola,", input$nombre, "!,",  "Tu año de nacimiento es ", 2024 - input$edad)
  })
}
...
```

Notar que la lógica puede variar en alumno a alumno, pero la idea es hacer un cálculo adicional utilizando el input de edad. Obviamente la soluciones propuestas pueden ser más complejas, elegantes o simples.